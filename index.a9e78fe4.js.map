{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nclass $a5fd07fa01589658$var$Game {\n    static GAME_STATUS = {\n        idle: \"idle\",\n        playing: \"playing\",\n        win: \"win\",\n        lose: \"lose\"\n    };\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.idle;\n        this.score = 0;\n        this.initialState = initialState;\n        this.state = initialState.map((row)=>[\n                ...row\n            ]);\n    }\n    getState() {\n        return this.state;\n    }\n    getScore() {\n        return this.score;\n    }\n    getStatus() {\n        return this.status;\n    }\n    start() {\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.playing;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.addCell();\n        this.addCell();\n        this.updateUI();\n    }\n    restart() {\n        this.score = 0;\n        this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.idle;\n        this.state = this.initialState.map((row)=>[\n                ...row\n            ]);\n        this.updateUI();\n    }\n    move(transform, untransform) {\n        if (this.getStatus() !== $a5fd07fa01589658$var$Game.GAME_STATUS.playing) return;\n        let canMove = false;\n        const newState = untransform(this.state).map((row)=>{\n            const filteredRow = row.filter((cell)=>cell !== 0);\n            const newRow = [];\n            for(let i = 0; i < filteredRow.length; i++)if (filteredRow[i] === filteredRow[i + 1]) {\n                const mergedValue = filteredRow[i] * 2;\n                newRow.push(mergedValue);\n                this.score += mergedValue;\n                i++;\n                canMove = true;\n            } else newRow.push(filteredRow[i]);\n            while(newRow.length < row.length)newRow.push(0);\n            if (!canMove && !row.every((cell, index)=>cell === newRow[index])) canMove = true;\n            return newRow;\n        });\n        const transformedNewState = transform(newState);\n        if (canMove) {\n            this.state = transformedNewState;\n            this.addCell();\n            this.updateUI();\n            this.checkStatus();\n        }\n        return canMove;\n    }\n    moveLeft() {\n        return this.move((state)=>state, (state)=>state);\n    }\n    moveRight() {\n        return this.move((state)=>state.map((row)=>row.reverse()), (state)=>state.map((row)=>row.reverse()));\n    }\n    moveUp() {\n        return this.move((state)=>this.transpose(state), (state)=>this.transpose(state));\n    }\n    moveDown() {\n        return this.move((state)=>this.transpose(state.map((row)=>row.reverse())), (state)=>this.transpose(state).map((row)=>row.reverse()));\n    }\n    transpose(state) {\n        return state[0].map((_, colIndex)=>state.map((row)=>row[colIndex]));\n    }\n    addCell() {\n        const emptyCells = [];\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 0) emptyCells.push({\n                r: i,\n                c: j\n            });\n        }\n        if (emptyCells.length === 0) return;\n        const { r: r, c: c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n        this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n    }\n    updateUI() {\n        const cells = document.querySelectorAll(\".field-cell\");\n        const stateValues = this.state.flat();\n        cells.forEach((cell, i)=>{\n            cell.className = \"field-cell\";\n            const value = stateValues[i];\n            if (value > 0) {\n                cell.textContent = value;\n                cell.classList.add(`field-cell--${value}`);\n            } else cell.textContent = \"\";\n        });\n        document.querySelector(\".game-score\").textContent = this.score;\n    }\n    checkStatus() {\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === 2048) {\n                this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.win;\n                return;\n            }\n        }\n        let canMerge = false;\n        for(let i = 0; i < this.state.length; i++){\n            for(let j = 0; j < this.state[i].length - 1; j++)if (this.state[i][j] === this.state[i][j + 1]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        for(let i = 0; i < this.state.length - 1; i++){\n            for(let j = 0; j < this.state[i].length; j++)if (this.state[i][j] === this.state[i + 1][j]) {\n                canMerge = true;\n                break;\n            }\n            if (canMerge) break;\n        }\n        const canMove = this.state.some((row)=>row.includes(0));\n        if (!canMove && !canMerge) this.status = $a5fd07fa01589658$var$Game.GAME_STATUS.lose;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$button = document.querySelector(\".button\");\nconst $09e991522ca7e64e$var$messageStart = document.querySelector(\".message-start\");\nconst $09e991522ca7e64e$var$messageLose = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$messageWin = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$gameScore = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$updateScore = ()=>$09e991522ca7e64e$var$gameScore.textContent = $09e991522ca7e64e$var$game.getScore();\n$09e991522ca7e64e$var$button.addEventListener(\"click\", $09e991522ca7e64e$var$activateGame);\nfunction $09e991522ca7e64e$var$activateGame() {\n    const isRestart = $09e991522ca7e64e$var$button.classList.toggle(\"restart\");\n    $09e991522ca7e64e$var$button.classList.toggle(\"start\");\n    $09e991522ca7e64e$var$messageStart.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageLose.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$messageWin.classList.add(\"hidden\");\n    $09e991522ca7e64e$var$gameScore.textContent = 0;\n    if (isRestart) {\n        $09e991522ca7e64e$var$button.textContent = \"Restart\";\n        $09e991522ca7e64e$var$game.start();\n    } else {\n        $09e991522ca7e64e$var$button.textContent = \"Start\";\n        $09e991522ca7e64e$var$game.restart();\n    }\n    document.addEventListener(\"keydown\", $09e991522ca7e64e$var$move);\n}\nconst $09e991522ca7e64e$var$deleteMove = ()=>document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$move);\nfunction $09e991522ca7e64e$var$move(e) {\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GAME_STATUS.playing) {\n        let canMove = false;\n        switch(e.key){\n            case \"ArrowLeft\":\n                canMove = $09e991522ca7e64e$var$game.moveLeft();\n                break;\n            case \"ArrowRight\":\n                canMove = $09e991522ca7e64e$var$game.moveRight();\n                break;\n            case \"ArrowUp\":\n                canMove = $09e991522ca7e64e$var$game.moveUp();\n                break;\n            case \"ArrowDown\":\n                canMove = $09e991522ca7e64e$var$game.moveDown();\n                break;\n            default:\n                break;\n        }\n        if (canMove) $09e991522ca7e64e$var$updateScore();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GAME_STATUS.lose) {\n        $09e991522ca7e64e$var$messageLose.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$deleteMove();\n    }\n    if ($09e991522ca7e64e$var$game.getStatus() === $a5fd07fa01589658$exports.GAME_STATUS.win) {\n        $09e991522ca7e64e$var$messageWin.classList.remove(\"hidden\");\n        $09e991522ca7e64e$var$deleteMove();\n    }\n    e.preventDefault();\n}\n\n\n//# sourceMappingURL=index.a9e78fe4.js.map\n","'use strict';\n\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\nconst button = document.querySelector('.button');\nconst messageStart = document.querySelector('.message-start');\nconst messageLose = document.querySelector('.message-lose');\nconst messageWin = document.querySelector('.message-win');\nconst gameScore = document.querySelector('.game-score');\n\nconst updateScore = () => (gameScore.textContent = game.getScore());\n\nbutton.addEventListener('click', activateGame);\n\nfunction activateGame() {\n  const isRestart = button.classList.toggle('restart');\n\n  button.classList.toggle('start');\n  messageStart.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  gameScore.textContent = 0;\n\n  if (isRestart) {\n    button.textContent = 'Restart';\n    game.start();\n  } else {\n    button.textContent = 'Start';\n    game.restart();\n  }\n\n  document.addEventListener('keydown', move);\n}\n\nconst deleteMove = () => document.removeEventListener('keydown', move);\n\nfunction move(e) {\n  if (game.getStatus() === Game.GAME_STATUS.playing) {\n    let canMove = false;\n\n    switch (e.key) {\n      case 'ArrowLeft':\n        canMove = game.moveLeft();\n        break;\n      case 'ArrowRight':\n        canMove = game.moveRight();\n        break;\n      case 'ArrowUp':\n        canMove = game.moveUp();\n        break;\n      case 'ArrowDown':\n        canMove = game.moveDown();\n        break;\n      default:\n        break;\n    }\n\n    if (canMove) {\n      updateScore();\n    }\n  }\n\n  if (game.getStatus() === Game.GAME_STATUS.lose) {\n    messageLose.classList.remove('hidden');\n    deleteMove();\n  }\n\n  if (game.getStatus() === Game.GAME_STATUS.win) {\n    messageWin.classList.remove('hidden');\n    deleteMove();\n  }\n\n  e.preventDefault();\n}\n","'use strict';\n\nclass Game {\n  static GAME_STATUS = {\n    idle: 'idle',\n    playing: 'playing',\n    win: 'win',\n    lose: 'lose',\n  };\n\n  constructor(\n    initialState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ],\n  ) {\n    this.status = Game.GAME_STATUS.idle;\n    this.score = 0;\n    this.initialState = initialState;\n    this.state = initialState.map((row) => [...row]);\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getScore() {\n    return this.score;\n  }\n\n  getStatus() {\n    return this.status;\n  }\n\n  start() {\n    this.status = Game.GAME_STATUS.playing;\n    this.state = this.initialState.map((row) => [...row]);\n    this.addCell();\n    this.addCell();\n    this.updateUI();\n  }\n\n  restart() {\n    this.score = 0;\n    this.status = Game.GAME_STATUS.idle;\n    this.state = this.initialState.map((row) => [...row]);\n    this.updateUI();\n  }\n\n  move(transform, untransform) {\n    if (this.getStatus() !== Game.GAME_STATUS.playing) {\n      return;\n    }\n\n    let canMove = false;\n    const newState = untransform(this.state).map((row) => {\n      const filteredRow = row.filter((cell) => cell !== 0);\n      const newRow = [];\n\n      for (let i = 0; i < filteredRow.length; i++) {\n        if (filteredRow[i] === filteredRow[i + 1]) {\n          const mergedValue = filteredRow[i] * 2;\n\n          newRow.push(mergedValue);\n          this.score += mergedValue;\n          i++;\n          canMove = true;\n        } else {\n          newRow.push(filteredRow[i]);\n        }\n      }\n\n      while (newRow.length < row.length) {\n        newRow.push(0);\n      }\n\n      if (!canMove && !row.every((cell, index) => cell === newRow[index])) {\n        canMove = true;\n      }\n\n      return newRow;\n    });\n\n    const transformedNewState = transform(newState);\n\n    if (canMove) {\n      this.state = transformedNewState;\n      this.addCell();\n      this.updateUI();\n      this.checkStatus();\n    }\n\n    return canMove;\n  }\n\n  moveLeft() {\n    return this.move(\n      (state) => state,\n      (state) => state,\n    );\n  }\n\n  moveRight() {\n    return this.move(\n      (state) => state.map((row) => row.reverse()),\n      (state) => state.map((row) => row.reverse()),\n    );\n  }\n\n  moveUp() {\n    return this.move(\n      (state) => this.transpose(state),\n      (state) => this.transpose(state),\n    );\n  }\n\n  moveDown() {\n    return this.move(\n      (state) => this.transpose(state.map((row) => row.reverse())),\n      (state) => this.transpose(state).map((row) => row.reverse()),\n    );\n  }\n\n  transpose(state) {\n    return state[0].map((_, colIndex) => state.map((row) => row[colIndex]));\n  }\n\n  addCell() {\n    const emptyCells = [];\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 0) {\n          emptyCells.push({ r: i, c: j });\n        }\n      }\n    }\n\n    if (emptyCells.length === 0) {\n      return;\n    }\n\n    const { r, c } = emptyCells[Math.floor(Math.random() * emptyCells.length)];\n\n    this.state[r][c] = Math.random() < 0.9 ? 2 : 4;\n  }\n\n  updateUI() {\n    const cells = document.querySelectorAll('.field-cell');\n    const stateValues = this.state.flat();\n\n    cells.forEach((cell, i) => {\n      cell.className = 'field-cell';\n\n      const value = stateValues[i];\n\n      if (value > 0) {\n        cell.textContent = value;\n        cell.classList.add(`field-cell--${value}`);\n      } else {\n        cell.textContent = '';\n      }\n    });\n\n    document.querySelector('.game-score').textContent = this.score;\n  }\n\n  checkStatus() {\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === 2048) {\n          this.status = Game.GAME_STATUS.win;\n\n          return;\n        }\n      }\n    }\n\n    let canMerge = false;\n\n    for (let i = 0; i < this.state.length; i++) {\n      for (let j = 0; j < this.state[i].length - 1; j++) {\n        if (this.state[i][j] === this.state[i][j + 1]) {\n          canMerge = true;\n          break;\n        }\n      }\n\n      if (canMerge) {\n        break;\n      }\n    }\n\n    for (let i = 0; i < this.state.length - 1; i++) {\n      for (let j = 0; j < this.state[i].length; j++) {\n        if (this.state[i][j] === this.state[i + 1][j]) {\n          canMerge = true;\n          break;\n        }\n      }\n\n      if (canMerge) {\n        break;\n      }\n    }\n\n    const canMove = this.state.some((row) => row.includes(0));\n\n    if (!canMove && !canMerge) {\n      this.status = Game.GAME_STATUS.lose;\n    }\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$a5fd07fa01589658$exports","$a5fd07fa01589658$var$Game","GAME_STATUS","idle","playing","win","lose","constructor","initialState","status","score","state","map","row","getState","getScore","getStatus","start","addCell","updateUI","restart","move","transform","untransform","canMove","transformedNewState","filteredRow","filter","cell","newRow","i","length","mergedValue","push","every","index","checkStatus","moveLeft","moveRight","reverse","moveUp","transpose","moveDown","_","colIndex","emptyCells","j","r","c","Math","floor","random","cells","document","querySelectorAll","stateValues","flat","forEach","className","value","textContent","classList","add","querySelector","canMerge","some","includes","$09e991522ca7e64e$var$game","$09e991522ca7e64e$var$button","$09e991522ca7e64e$var$messageStart","$09e991522ca7e64e$var$messageLose","$09e991522ca7e64e$var$messageWin","$09e991522ca7e64e$var$gameScore","$09e991522ca7e64e$var$updateScore","addEventListener","isRestart","toggle","$09e991522ca7e64e$var$move","$09e991522ca7e64e$var$deleteMove","removeEventListener","e","key","remove","preventDefault"],"version":3,"file":"index.a9e78fe4.js.map"}